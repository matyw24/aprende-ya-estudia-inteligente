
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { Textarea } from "@/components/ui/textarea";

const ExamQuestionGenerator = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedQuestion, setGeneratedQuestion] = useState<string | null>(null);
  
  // Mock questions that would be generated by AI
  const mockQuestions = [
    {
      type: "multiple",
      text: "¿Cuál de los siguientes es un ejemplo de condicionamiento clásico?",
      options: [
        "Un perro que saliva al escuchar una campana después de asociarla con comida",
        "Un estudiante que estudia más para obtener mejores calificaciones",
        "Un niño que deja de tocar objetos calientes después de quemarse",
        "Un pájaro que aprende una nueva ruta migratoria"
      ],
      answer: 0
    },
    {
      type: "truefalse",
      text: "La teoría de la relatividad especial fue propuesta por Isaac Newton.",
      answer: false
    },
    {
      type: "open",
      text: "Explica el proceso del ciclo del agua y su importancia para los ecosistemas terrestres.",
      keywords: ["evaporación", "condensación", "precipitación", "infiltración", "ecosistemas"]
    }
  ];
  
  const handleGenerate = () => {
    setIsGenerating(true);
    // Simulate API call
    setTimeout(() => {
      const randomQuestion = mockQuestions[Math.floor(Math.random() * mockQuestions.length)];
      let formattedQuestion = "";
      
      if (randomQuestion.type === "multiple") {
        formattedQuestion = `${randomQuestion.text}\n\nOpciones:\n`;
        randomQuestion.options.forEach((option, idx) => {
          formattedQuestion += `${String.fromCharCode(65 + idx)}. ${option}\n`;
        });
        formattedQuestion += `\nRespuesta correcta: ${String.fromCharCode(65 + (randomQuestion.answer as number))}`;
      } else if (randomQuestion.type === "truefalse") {
        formattedQuestion = `${randomQuestion.text}\n\nRespuesta: ${randomQuestion.answer ? "Verdadero" : "Falso"}`;
      } else if (randomQuestion.type === "open") {
        formattedQuestion = `${randomQuestion.text}\n\nPalabras clave para evaluar: ${randomQuestion.keywords.join(", ")}`;
      }
      
      setGeneratedQuestion(formattedQuestion);
      setIsGenerating(false);
    }, 1500);
  };
  
  return (
    <div className="w-full max-w-3xl mx-auto p-6 bg-white rounded-lg shadow-sm border">
      <h2 className="text-2xl font-bold mb-6 text-center">Generador de Preguntas</h2>
      
      <div className="space-y-6">
        <div className="p-4 bg-secondary rounded-lg">
          <p className="text-muted-foreground">
            Introduce el tema o contenido específico para el que deseas generar una pregunta. 
            La IA analizará la información y creará preguntas relevantes.
          </p>
        </div>
        
        <Textarea
          placeholder="Ejemplo: Introducción a la psicología cognitiva y sus principales teorías..."
          className="min-h-[120px]"
        />
        
        <div className="flex gap-4">
          <Button 
            onClick={handleGenerate} 
            className="flex-1"
            disabled={isGenerating}
          >
            {isGenerating ? "Generando..." : "Generar Pregunta"}
          </Button>
          <Button variant="outline" className="flex-1" disabled={!generatedQuestion}>
            Guardar Pregunta
          </Button>
        </div>
        
        {generatedQuestion && (
          <div className="mt-6 p-4 border rounded-lg">
            <h3 className="font-semibold mb-2">Pregunta Generada:</h3>
            <div className="whitespace-pre-line">
              {generatedQuestion}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ExamQuestionGenerator;
